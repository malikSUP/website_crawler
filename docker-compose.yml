services:
  postgres:
    image: postgres:15-alpine
    container_name: websites_crawler_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - crawler_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    image: airmalik0/crawler_backend
    container_name: websites_crawler_backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - SERVER_HOST=${SERVER_HOST}
      - SERVER_PORT=${SERVER_PORT}
      - DEBUG_MODE=${DEBUG_MODE}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GOOGLE_CX=${GOOGLE_CX}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    networks:
      - crawler_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  frontend:
    image: airmalik0/crawler_frontend
    container_name: websites_crawler_frontend
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
    ports:
      - "80:80"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - crawler_network
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  backend_logs:
    driver: local

networks:
  crawler_network:
    driver: bridge 